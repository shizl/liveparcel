<?php

define('USERPOINTS_UC_EARN', 'userpoints_ubercart_earn');
define('USERPOINTS_MIN_PURCHASE', 'userpoints_min_purchase');
define('USERPOINTS_AWARD_TO', 'userpoints_award_to');
define('USERPOINTS_REF_MULT', 'userpoints_ref_mult');
define('USERPOINTS_AWARD_MODERATE', 'userpoints_award_moderate');
define('USERPOINTS_REF_MODERATE', 'userpoints_ref_moderate');
define('USERPOINTS_AWARD_CATEGORY', 'userpoints_award_category');

/**
 * Implementation of hook_help().
 */
function uc_userpoints_award_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('<strong>Userpoints Award:</strong> Interfaces userpoints with Ubercart so users can get points for purchases.');
  }
}

/**
 * Implementation of hook_userpoints api().
 */
function uc_userpoints_award_userpoints($op, $points = 0, $uid = 0, $event = '') {
  switch($op) {
    case 'setting':
      if (module_exists('uc_cart') && module_exists('uc_payment')) {
        $group = 'uc_userpoints_award';
        $form[$group] = array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Ubercart Award Options'),
        );
        $userpoints_translation = userpoints_translation();
        $form[$group][USERPOINTS_UC_EARN] = array(
          '#type' => 'textfield',
          '#title' => t('!Points awarded for buying (multiplied by product price)', $userpoints_translation),
          '#default_value' => variable_get(USERPOINTS_UC_EARN, 0),
          '#size' => 5,
          '#maxlength' => 5,
        );
        $form[$group][USERPOINTS_MIN_PURCHASE] = array(
          '#type' => 'textfield',
          '#title' => t('Smallest purchase for which !points are awarded', $userpoints_translation),
          '#default_value' => variable_get(USERPOINTS_MIN_PURCHASE, '0.00'),
          '#size' => 5,
          '#maxlength' => 5,
        );
        $form[$group][USERPOINTS_AWARD_MODERATE] = array(
          '#type' => 'radios',
          '#title' => t('Moderate userpoints transaction'),
          '#default_value' => variable_get(USERPOINTS_AWARD_MODERATE, 0),
          '#options' => array(t('No'), t('Yes')),
        );
        $form[$group][USERPOINTS_AWARD_CATEGORY] = array(
          '#type' => 'select',
          '#title' => t('Award Category'),
          '#description' => t('Category to assign awarded !points.', $userpoints_translation),
          '#default_value' => variable_get(USERPOINTS_AWARD_CATEGORY, NULL),
          '#options' => userpoints_get_categories(),
        );
        if(module_exists('referral')) {
          $form[$group][USERPOINTS_AWARD_TO] = array(
            '#type' => 'radios',
            '#title' => t('User to whom !points are awarded on purchase', $userpoints_translation),
            '#default_value' =>  variable_get(USERPOINTS_AWARD_TO,0),
            '#options' => array(t('Referrer only'), t('Purchaser only'), t('Referrer and Purchaser')),
          );
          $form[$group][USERPOINTS_REF_MULT] = array(
            '#type' => 'textfield',
            '#title' => t('!points multiplier for referrer', $userpoints_translation),
            '#default_value' =>  variable_get(USERPOINTS_REF_MULT,1),
            '#size' => 5,
            '#maxlength' => 5,
            '#description' => t('Enter the number of !points awarded per dollar.  <b>This field is only valid when "Referrer and Purchaser" is selected above.  Otherwise the standard multiplier is used.</b>', $userpoints_translation),
          );
          $form[$group][USERPOINTS_REF_MODERATE] = array(
            '#type' => 'radios',
            '#title' => t('Moderate userpoints transaction'),
            '#default_value' => variable_get(USERPOINTS_REF_MODERATE, 0),
            '#options' => array(t('No'), t('Yes')),
          );
        }
      }
      return $form;
      break;
  }
}

/**
 * Implementation of hook_uc_order();
 */

function uc_userpoints_award_uc_order($op, $order, $status) {
  switch ($op) {
    case 'update':
      // We might want to add the "Order Status" to the Userpoints Ubercart options...
      if ($order->order_status != 'completed' && ($status == 'completed' && $order->uid > 0) && ($order_user = user_load($order->uid)) !== FALSE) {
        $query = db_query("SELECT * FROM {uc_up_award_log} WHERE uid = :uid AND oid = :oid", array(':uid' => $order->uid, ':oid' => $order->order_id))->fetchObject();
        if (isset($query->uid) && $query->uid) {
          return;
        }
        $total = 0;
        $multiplier = variable_get(USERPOINTS_UC_EARN, 0);
        $min = variable_get(USERPOINTS_MIN_PURCHASE, '0.00');
        if (is_array($order->products) && count($order->products)) {
          foreach ($order->products as $product) {
            $total += $product->qty * $product->price;
          }
        }
        $refUserId = 0; // default to 0 so if referral module is not installed or no referrer, we skip all referral code
        $ref_mult = 1; // assume a multiplier of 1, unless $award_to == 2, in which case we retrieve the value below
        // award_to: 0 = award points to referral
        // award_to: 1 = award points to purchaser
        // award_to: 2 = award points to referral and purchaser
        $award_to = intval(variable_get(USERPOINTS_AWARD_TO, 1));
        if (module_exists('referral')) {
          if($award_to == 0 || $award_to == 2){
            // Look up our referrer if we have one
            //$result = db_query("select referral_uid FROM {referral} WHERE uid = %d", $curUserId);
            $ref = db_query("SELECT referral_uid FROM {referral} WHERE uid = :uid", array(':uid' => $order->uid))->fetchObject();
            if(!empty($ref)){
              $refUserId = $ref->referral_uid;
              if($award_to == 2){
                $ref_mult =  variable_get(USERPOINTS_REF_MULT,1);
              }
            }
          }
        }

        // Payment completed
        // Award points to buyer, if appropriate
        if ($order->uid != 0 && ($award_to == 1 || $award_to == 2) && strtolower($order->payment_method) != 'points') {
          // User id from the transaction
          if ($total < $min) {
            $points = 0;
          }
          else {
            $points = intval(($total * $multiplier));
            $params = array (
              'tid' => variable_get(USERPOINTS_AWARD_CATEGORY, 0),
              'uid' => $order->uid,
              'points' => $points,
              'operation' => 'insert',
              'description' => 'User made a purchase, awarding points (Ubercart Order ID ' . $order->order_id . ')',
              'entity_id' => $order->order_id,
              'entity_type' => 'Ubercart Transaction',
              'moderate' => variable_get(USERPOINTS_AWARD_MODERATE, 0),
            );
            $st = userpoints_userpointsapi($params);
            db_insert('uc_up_award_log')
              ->fields(array(
                'uid' => $order->uid,
                'oid' => $order->order_id,
                'points' => $points,
              ))
              ->execute();
          }
        }

        // Award referral points, if appropriate
        if ($refUserId != 0 && ($award_to == 0 || $award_to == 2)) {
          if ($total < $min) {
            $points = 0;
          }
          else {
            $points = intval(($total * $multiplier * $ref_mult));
            $params = array (
              'tid' => variable_get(USERPOINTS_AWARD_CATEGORY, 0),
              'uid' => $refUserId,
              'points' => $points,
              'operation' => 'insert',
              'description' => 'Purchase made by someone you referred, awarding points to referrer (Ubercart Order ID ' . $order->order_id . ')',
              'entity_id' => $order->order_id,
              'entity_type' => 'Ubercart Transaction',
              'moderate' => variable_get(USERPOINTS_REF_MODERATE, 0),
            );
            $st = userpoints_userpointsapi($params);
            //db_query("insert into {uc_up_award_log} (uid, oid, points) values(%d, %d, %d)", $refUserId, $order->order_id, $points);
            db_insert('uc_up_award_log')
              ->fields(array(
                'uid' => $refUserId,
                'oid' => $order->order_id,
                'points' => $points,
              ))
              ->execute();
          }
        }
      }
  }
}
