<?php
/**
 * @file
 * Contains global Live Parcels functions and store administration functionality.
 *
 * The store module is a container of sorts for various helper functions used
 * in different parts of the Ubercart core.  It also provides screens and
 * settings pages for use in store administration.
 */


/**
 * Implements hook_menu().
 */
function liveparcels_menu() {
  global $user;
  $items = array();

  $items['admin/liveparcels'] = array(
    'title' => 'LiveParcels',
    'description' => 'Administer orders, parcels, pricing, postcode, discount, etc.',
    'page callback' => 'liveparcels_configpage',
    'access arguments' => array('administer actions'),
    'weight' => -13,
    'file' => 'liveparcels.admin.inc',
  );

  $items['admin/liveparcels/adminsetting'] = array(

    'title' => 'Settings',
    'description' => 'Admin settings for liveparcels.',
    'page callback' => 'liveparcels_configuration_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 6,
    'position' => 'right',
  );

    $items['admin/liveparcels/users/userspoints'] = array(
	'title' => 'User Points',
	'description' => 'Administer userpoints used for pre-paid customers.',
	'page callback' => 'liveparcels_configuration_userspoints',
	'access arguments' => array('administer liveparcel'),
	'weight' => 0,
	);
	
	$items['admin/liveparcels/reports/tax'] = array(
	'title' => 'Sales tax',
	'description' => 'View/export report on sales tax.',
	'page callback' => 'liveparcels_sales_tax',
	'access arguments' => array('administer liveparcel'),
	'weight' => 10,
	);

/*
  $items['admin/liveparcels/configuration'] = array(

    'title' => 'Configuration',
    'description' => 'Adjust add  menu for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 2,
    'position' => 'right',
  );

  $items['admin/liveparcels/configuration/settings'] = array(
    'title' => 'Custom setting',
    'description' => 'Custom setting',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('liveparcels_custom_message_form'),
    'access arguments' => array('administer liveparcel'),
    'file' => 'liveparcels.admin.inc',
  );
  */
      $items['admin/liveparcels/orders'] = array(
    'title' => 'Orders',
    'description' => 'View orders for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 2,
    'position' => 'left',
  );
  
    $items['admin/liveparcels/parcels'] = array(
    'title' => 'Parcels',
    'description' => 'View parcels for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 4,
    'position' => 'left',
  );
  
    $items['admin/liveparcels/parcels_map'] = array(
    'title' => 'Parcels map',
    'description' => 'View parcels map for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 6,
    'position' => 'left',
  );
  
    $items['admin/liveparcels/drivers'] = array(
    'title' => 'Drivers',
    'description' => 'View drivers info for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 2,
    'position' => 'right',
  );
  
    $items['admin/liveparcels/users'] = array(
    'title' => 'Users',
    'description' => 'View users info for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 8,
    'position' => 'left',
  );
  
    $items['admin/liveparcels/reports'] = array(
    'title' => 'Reports',
    'description' => 'View reports for liveparcels.',
    'page callback' => 'liveparcels_menu_page',
    'access arguments' => array('administer liveparcel'),
    'weight' => 0,
    'position' => 'right',
  );
  
/*

  $items['admin/liveparcels/adminsetting/settings'] = array(
    'title' => 'Pricing and postcode',
    'description' => 'Configure pricing and postcode. View price table.',
    'page callback' => 'liveparcels_admin_settings',
    'access arguments' => array('administer liveparcel'),
    'file' => 'liveparcels.admin.inc',
  );
*/

  $items['admin/liveparcels/adminsetting/package_size'] = array(
    'title' => 'Package size',
    'description' => 'Configure package price. View price table.',
    'page callback' => 'liveparcels_admin_packagesize',
    'access arguments' => array('administer liveparcel'),
    'file' => 'liveparcels.admin.inc',
  );


  $items['admin/liveparcels/adminsetting/postcode'] = array(
    'title' => 'Postcode',
    'description' => 'Configure postcode . View price table.',
    'page callback' => 'liveparcels_admin_postcode',
    'access arguments' => array('administer liveparcel'),
    'file' => 'liveparcels.admin.inc',
  );


  $items['admin/liveparcels/adminsetting/message'] = array(
    'title' => 'Quote and book messages',
    'description' => 'Customize the messages to show at the quote and book page.',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('liveparcels_admin_message_form'),
    'access arguments' => array('administer liveparcel'),
    'file' => 'liveparcels.admin.inc',
  );

  $items['admin/liveparcels/settings/updatefactor/ajax'] = array(
    'title' => 'Update factor',
    'description' => 'Update factor.',
    'page callback' => 'liveparcels_factor_settings',
    'access callback' => true,
    'file' => 'liveparcels.admin.inc',
    'type'=>MENU_CALLBACK,
  );


  $items['admin/liveparcels/settings/managepackage/ajax'] = array(
    'title' => 'manage package  ',
    'description' => 'manage package.',
    'page callback' => 'liveparcels_managepackage',
    'access callback' => true,
    'file' => 'liveparcels.admin.inc',
    'type'=>MENU_CALLBACK,
  );
  $items['admin/liveparcels/settings/fileupload/ajax'] = array(
    'title' => 'manage fileupload  ',
    'description' => 'manage fileupload.',
    'page callback' => 'liveparcels_fileupload',
    'access callback' => true,
    'type'=>MENU_CALLBACK,
    'file' => 'liveparcels.admin.inc',
  );
  $items['admin/liveparcels/settings/zoneresult/ajax'] = array(
    'title' => 'manage zoneresult  ',
    'description' => 'manage zoneresult.',
    'page callback' => 'liveparcels_zoneresult',
    'access callback' => true,
    'type'=>MENU_CALLBACK,
    'file' => 'liveparcels.admin.inc',
  );
  $items['admin/liveparcels/settings/updatezone/ajax'] = array(
    'title' => ' updatezone  ',
    'description' => ' updatezone.',
    'page callback' => 'liveparcels_updatezone',
    'access callback' => true,
    'type'=>MENU_CALLBACK,
    'file' => 'liveparcels.admin.inc',
  );

if(module_exists('distance_price')){

  $items['liveparcels/parcel_quote'] = array(
    'title' => 'Quote and book',
    'description' => 'Obtain quotation and book delivery/pickup',
    'page callback' => 'liveparcels_packageshow',
    'access callback' => true,
    'file' => 'liveparcels2.inc',
    'menu_name'=>'main-menu',
    'weight'=>2,
  );

  $items['admin/liveparcels/getpackageprice/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getPackageprice',
    'access callback' => true,
    'file' => 'liveparcels2.inc',
    'type'=>MENU_CALLBACK,
  );

  $items['admin/liveparcels/getzoneprice/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getZoneprice',
    'access callback' => true,
    'file' => 'liveparcels2.inc',
    'type'=>MENU_CALLBACK,
  );

  $items['admin/liveparcels/getzonelistdata/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getZonelistData',
    'access callback' => true,
    'file' => 'liveparcels2.inc',
    'type'=>MENU_CALLBACK,
  );



}else{
  $items['liveparcels/parcel_quote'] = array(
    'title' => 'Quote and book',
    'description' => 'Obtain quotation and book delivery/pickup',
    'page callback' => 'liveparcels_packageshow',
    'access callback' => true,
    'file' => 'liveparcels.inc',
    'menu_name'=>'main-menu',
    'weight'=>2,
  );

  $items['admin/liveparcels/getpackageprice/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getPackageprice',
    'access callback' => true,
    'file' => 'liveparcels.inc',
    'type'=>MENU_CALLBACK,
  );

  $items['admin/liveparcels/getzoneprice/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getZoneprice',
    'access callback' => true,
    'file' => 'liveparcels.inc',
    'type'=>MENU_CALLBACK,
  );

  $items['admin/liveparcels/getzonelistdata/ajax'] = array(
    'title' => ' package show  ',
    'description' => ' package show.',
    'page callback' => 'liveparcels_getZonelistData',
    'access callback' => true,
    'file' => 'liveparcels.inc',
    'type'=>MENU_CALLBACK,
  );



}


  $items['parcel_quote'] = array(
    'title' => 'Quote and book ',
    'description' => 'Obtain quotation and book delivery/pickup.',
    'page callback' => array('liveparcels_parcel_quote_set'),
    'access callback'=>true,
    'menu_name'=>'navigation',
    'weight'=>1,
  );
  $items['liveparcels/parcels_addtocart'] = array(
    'title' => 'Parcels add to cart',
    'description' => 'Parcels add to cart',
    'page callback' => 'liveparcels_addToCart',
    'access callback' => true,
    'file' => 'liveparcels_checkout.inc',
    'menu_name'=>'liveparcels',
    'weight'=>2,
  );

  $items['user/%user/live_parcel_price'] = array(
    'title' => 'Price list',
    'description' => 'My price list including discount',
    'page callback' => array('liveparcels_live_parcel_price'),
    'access callback' => 'user_is_logged_in',
    'file' => 'liveparcels.admin.inc',
    'type'=>MENU_LOCAL_TASK,
  );
 
    $items['live_parcel_price'] = array(
      'title' => 'My price list',
      'description' => 'My price list including discount',
      'page callback' => array('liveparcels_live_parcel_price_set'),
       'access callback' => 'user_is_logged_in',
      'menu_name'=>'user-menu',
      'weight'=>0,
    );
  
  return $items;
}
/**
 * Alias link in liveparcel menu
 */
	function liveparcels_configuration_userspoints(){
	drupal_goto("admin/config/people/userpoints");
	}
	function liveparcels_sales_tax(){
	drupal_goto("admin/store/reports/tax");
	}
/**
 * Displays liveparcel configuration page.
 */
function liveparcels_configuration_page() {
  $menu = menu_get_item('admin/liveparcels/adminsetting');
  $content = system_admin_menu_block($menu);
  $build['menu'] = array(
    '#theme' => 'admin_block_content',
    '#content' => $content,
  );

  return $build;
}
/**
 * Displays liveparcel configuration page.
 */
function liveparcels_menu_page() {
  $menu = menu_get_item('admin/liveparcels/configuration');
  $content = system_admin_menu_block($menu);

  $build['menu'] = array(
    '#theme' => 'admin_block_content',
    '#content' => $content,
  );

  return $build;
}
/**
 * Implements hook_permission().
 */
function liveparcels_permission() {
  return array(
    'administer liveparcel' => array(
      'title' => t('Administer liveparcel'),
      'restrict access' => TRUE,
    ),
  );

}
function liveparcels_live_parcel_price_set(){
  global $user;
  if($user->uid>0){
    header("location:/user/".$user->uid."/live_parcel_price");
  }else{
    header("location:/user");
  }  
}
function liveparcels_parcel_quote_set(){
  header("location:/liveparcels/parcel_quote");
}
/*get zonelistdata*/
function liveparcels_getZonelistData($key='',$action='json') {
  $postlist =array();

  $result= db_query("SELECT `pcode`,`state`,`locality`,`zone_number` 
    FROM `{liveparcels_zone_post}` ");
  if($action=='string' && $key!=''){
    $str='';
    $zarray=explode('_',$key);   
    foreach($result as $row){
      if( $zarray[0]==$row->zone_number && $zarray[1]==$row->state && $zarray[2]==$row->pcode ){
        $str = $row->locality.' '.$row->pcode;
        break;
      }
    }
    return $str;
  }else{
    foreach($result as $row){
      $postlist[] = array(
        'pcode' => $row->pcode,
        'locality' => $row->locality,	
        'state' => $row->state,	
        'pnum'=>$row->zone_number		  
      );
    }
    return json_encode($postlist);
  }	
}
/* create liveparcels pane */
function liveparcels_uc_checkout_pane_parcels($op, $order, $form = NULL, &$form_state = NULL){
  $parcels=liveparcels_getparcelsdata();

  if($parcels){

    switch ($op) {
    case 'view':
      $check_order=db_query("SELECT `order_id` FROM `liveparcels_order` WHERE `order_id`=".$order->order_id)->fetchField();
      if($check_order>0){
        db_update('liveparcels_order')->fields(array('parcel_info' => serialize($parcels)))->condition('order_id',$order->order_id , '=')->execute();
      }else{
        db_insert('liveparcels_order')->fields(array('order_id'=>$order->order_id,'parcel_info' => serialize($parcels)))->execute();
      }
      $lid_tax = db_query("SELECT line_item_id FROM {uc_order_line_items} WHERE order_id = :id AND type = :type", array(':id' => $order->order_id, ':type' => 'subtotal'))->fetchField();
      if($lid_tax){
        uc_order_update_line_item($lid_tax,'Parcel price', $parcels['totals']);
      }else{
        uc_order_line_item_add($order->order_id,'subtotal','Parcel price',$parcels['totals'],'1');
      }
      if(module_exists('lp_discount')){
        $discount = db_query("SELECT line_item_id FROM {uc_order_line_items} WHERE order_id = :id AND type = :type", array(':id' => $order->order_id, ':type' => 'discount'))->fetchField();
        if($discount){
          uc_order_update_line_item($discount,'Parcel discount', -$parcels['discount']);
        }else{
          uc_order_line_item_add($order->order_id,'discount','Parcel discount',-$parcels['discount'],'9');
        }
      }
	

      $contents['liveparcels_review_table'] = array(
        '#theme' => 'liveparcels_review_table',
        '#items' => $parcels,
        '#weight' => variable_get('uc_pane_cart_field_cart_weight', 2),
      );

      return array('contents' => $contents, 'next-button' => FALSE);

    case 'review':
      $review[] = theme('liveparcels_review_table', array('items' => $parcels, 'show_subtotal' => FALSE));
      return $review;
    }
  }
}


function liveparcels_user_load($users) {
  if (request_uri() == '/user?destination=cart/checkout') {
    foreach ($users as $account) {
      if ($account->uid != 0) {
        // Add items from an anonymous cart to a user's permanent cart on login.
        //uc_cart_login_update($account->uid);

	if (!isset($_SESSION['uc_cart_id'])) {
	    return;
	  }
       db_delete('liveparcels_cart')->condition('cart_id',$account->uid , '=')->execute();
                 db_update('liveparcels_cart') // Table name no longer needs {}
		   ->fields(array(
		    'cart_id' =>$account->uid,
		  ))
		  ->condition('cart_id',$_SESSION['uc_cart_id'], '=')
		  ->execute();  
   // unset($_SESSION['uc_cart_id']);
      }
    }
  }
}


/*get parcels data*/
function liveparcels_getparcelsdata(){
  $cart_id=uc_cart_get_id();
  $pid=db_query("SELECT COUNT(`nid`) AS cid,`nid` FROM `uc_cart_products` WHERE `cart_id`='$cart_id'")->fetchAssoc();
  if($pid['cid']==1 && $pid['nid']==variable_get('liveparcels_product_id')){
    $pdata=db_query("SELECT `parcel_info` FROM `liveparcels_cart` WHERE `cart_id`='$cart_id'")->fetchField();
    $pdata=!empty($pdata) ? unserialize($pdata):0;
  }else{
    db_query("DELETE FROM `uc_cart_products` WHERE `nid`='".variable_get('liveparcels_product_id')."' AND `cart_id`='$cart_id'");
    db_query("DELETE FROM `liveparcels_cart` WHERE `cart_id`='$cart_id'");
    $pdata=0;
  }
  return  $pdata;
}

function theme_liveparcels_review_table($variables) {
  $parcels = $variables['items'];
  // Set up table header.


 if(module_exists('lp_feature_service')&&get_service_type_count()>1&&!empty($parcels['parcels'][0]['service_type'])){
  $header = array(
    array('data' => t('Products'), 'class' => array('products')),
    array('data' =>t('Dimension'), 'class' => array('price')),
    array('data' =>t('Weight'), 'class' => array('price')),
    array('data' =>t('Price'), 'class' => array('price')),
    array('data' =>t('Service Fee'), 'class' => array('price')),
  );
 }else{
  $header = array(
    array('data' => t('Products'), 'class' => array('products')),
    array('data' =>t('Dimension'), 'class' => array('price')),
    array('data' =>t('Weight'), 'class' => array('price')),
    array('data' =>t('Price'), 'class' => array('price')),
  );
 }



  // Set up table rows.
  foreach ($parcels['parcels'] as $parcel ) {

     if(module_exists('lp_feature_service')&&get_service_type_count()>1&&!empty($parcel['service_type'])){

      $val = get_service_value($parcel['service_type']);
      $service_price = intval(str_replace(variable_get('uc_currency_sign','$'),'',$parcel['price']))*$val;
    $rows[] = array(
      array('data' => $parcel['parcelnum'], 'class' => array('products')),
      array('data' => $parcel['dimfirst'].'x'.$parcel['dimsecond'].'x'.$parcel['dimthree'].' cm','class' => array('price')),
      array('data' => $parcel['weighttext'].' kg','class' => array('price')),
      array('data' =>  $parcel['price'],'class' => array('price')),
      array('data' =>  variable_get('uc_currency_sign','$').sprintf('%.2f',$service_price),'class' => array('price')),
    );

      }else{

    $rows[] = array(
      array('data' => $parcel['parcelnum'], 'class' => array('products')),
      array('data' => $parcel['dimfirst'].'x'.$parcel['dimsecond'].'x'.$parcel['dimthree'].' cm','class' => array('price')),
      array('data' => $parcel['weighttext'].' kg','class' => array('price')),
      array('data' =>  $parcel['price'],'class' => array('price')),
    );

     }
  }

  // Add the subtotal as the final row.
  $rows[] = array(
    'data' => array(
      // One cell
      array(
        'data' => array(
          '#theme' => 'uc_price',
          '#prefix' => '<span id="subtotal-title">' . t('Parcels price:') . '</span> ',
          '#price' => $parcels['totals'],
        ),
        // Cell attributes
        'colspan' => 5,
        'class' => array('subtotal'),
      ),
    ),
    // Row attributes
    'class' => array('subtotal'),
  );
  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('cart-review'))));
}
/**
 * Implements hook_uc_checkout_pane().
 */
function liveparcels_uc_checkout_pane() {
  $parcels=liveparcels_getparcelsdata();

  $panes['parcels'] = array(
    'id' => 'parcels',
    'callback' => 'liveparcels_uc_checkout_pane_parcels',
    'title' => t('Parcels contents'),
    'desc' => t("Display the contents of a customer's shopping cart."),
    'enabled' => FALSE,
    'weight' => 1,
  ); 
  return $panes;    
}
/**
 * Implements hook_theme().
 */
function liveparcels_theme() {
  return array( 'liveparcels_review_table' => array(
    'variables' => array('items' => array(), 'show_subtotal' => TRUE)
  ));
}

/*
 * Implement hook_uc_line_item()
 */
function liveparcels_uc_line_item(){
  $items=array();
  $items['subtotal'] = array(
    'id'=>'subtotal',
    'title' => t('Parcels price'), 
    'weight' => 1, 
    'default' => FALSE, 
    'stored' => TRUE, 
    'add_list' =>  isset($parcels['totals']) && $parcels['totals']>0 ? true:false, 
    'calculated' => isset($parcels['totals']) && $parcels['totals']>0 ? false:true, 
    'callback' => 'liveparcels_subtotal');
  $items[] = array(
    'id' => 'subtotal', 
    'title' => t('Parcels price'), 
    'weight' => 1, 
    'default' => FALSE, 
    'stored' => TRUE, 
    'add_list' => isset($parcels['totals']) && $parcels['totals']>0 ? false:true, 
    'calculated' => isset($parcels['totals']) && $parcels['totals']>0 ? true:false, 
    'callback' => 'uc_line_item_generic',
  );

  if(module_exists('lp_discount')){
    $items[] = array(
      'id' => 'discount', 
      'title' => t('Parcel discount'), 
      'weight' => 9, 
      'default' => FALSE, 
      'stored' => TRUE, 
      'add_list' => TRUE, 
      'calculated' => TRUE, 
      'callback' => 'uc_line_item_generic',
    );   
  }
  return $items;
} 
function liveparcels_subtotal($order) {

  $lines[] = array(
    'id' => 'subtotal',
    'title' => t('Parcel price'),
    'amount' => $order->order_total,
  );
  return $lines;

}
/* if product_id is liveparcel,cart hiddren */
function liveparcels_uc_cart_pane_alter($items) {
  $parcels=liveparcels_getparcelsdata();
  if($parcels){
    header("location:/liveparcels/parcel_quote");exit;
  }
}
/*if product_id is liveparcel,checkout cart pane hiddren*/
function liveparcels_uc_checkout_pane_alter(&$panes) {
  $parcels=liveparcels_getparcelsdata();
  if($parcels){
    $panes['cart']['enabled'] = false;
    $panes['parcels']['enabled'] = true;
  }else{
    $panes['parcels']['enabled'] = false;
  }
}
function liveparcels_create_field($field_description,$field_name,$field_set){
  if (!field_info_field($field_name)) {
    $field = array(
      'field_name' => $field_name, 
      'type' => $field_set['type'], 
      'settings' => $field_set['setting']
    );
    field_create_field($field);
    $instance = array(
      'field_name' =>$field_name, 
      'entity_type' => 'node', 
      'label' =>$field_description, 
      'bundle' => 'live_parcel', 
      'widget'=> array(
        'type' => $field_set['widget'],
        'settings' => !empty($field_set['wsettings']) && is_array($field_set['wsettings']) && count($field_set['wsettings'])>0 ? $field_set['wsettings']:array(),
      ),
      'settings'=>$field_set['setting'],
      'display'=>$field_set['display'],
      'required' => false,
    );
    field_create_instance($instance);
  }
}

/*
function moveFile($fileUrl, $aimUrl, $overWrite = false) {
        if (!file_exists($fileUrl)) {
            return false;
        }
        if (file_exists($aimUrl) && $overWrite = false) {
            return false;
        } elseif (file_exists($aimUrl) && $overWrite = true) {
            unlinkFile($aimUrl);
        }
        $aimDir = dirname($aimUrl);
           createDir($aimDir);
      //  rename($fileUrl, $aimUrl);
        return true;
}

function unlinkFile($aimUrl) {
        if (file_exists($aimUrl)) {
            unlink($aimUrl);
            return true;
        } else {
            return false;
        }
}

 function createDir($aimUrl) {
        $aimUrl = str_replace('', '/', $aimUrl);
        $aimDir = '';
        $arr = explode('/', $aimUrl);
        $result = true;
        foreach ($arr as $str) {
            $aimDir .= $str . '/';
            if (!file_exists($aimDir)) {
                $result = mkdir($aimDir);
            }
        }
        return $result;
}
*/
